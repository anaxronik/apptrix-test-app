[{"/home/anx/Рабочий стол/aptrix-test-app/src/index.js":"1","/home/anx/Рабочий стол/aptrix-test-app/src/components/App/App.jsx":"2","/home/anx/Рабочий стол/aptrix-test-app/src/redux/rootReducer.js":"3","/home/anx/Рабочий стол/aptrix-test-app/src/redux/types.js":"4","/home/anx/Рабочий стол/aptrix-test-app/src/redux/actions.js":"5","/home/anx/Рабочий стол/aptrix-test-app/src/redux/appReducer.js":"6","/home/anx/Рабочий стол/aptrix-test-app/src/components/RegistrationPage/RegistrationPage.jsx":"7","/home/anx/Рабочий стол/aptrix-test-app/src/components/LoginPage/LoginPage.jsx":"8","/home/anx/Рабочий стол/aptrix-test-app/src/components/MainPage/MainPage.jsx":"9","/home/anx/Рабочий стол/aptrix-test-app/src/components/Header/Header.jsx":"10","/home/anx/Рабочий стол/aptrix-test-app/src/redux/authReducer.js":"11","/home/anx/Рабочий стол/aptrix-test-app/src/axios/API.js":"12","/home/anx/Рабочий стол/aptrix-test-app/src/localStorage/localStorage.js":"13"},{"size":631,"mtime":1610969511268,"results":"14","hashOfConfig":"15"},{"size":782,"mtime":1610964618309,"results":"16","hashOfConfig":"15"},{"size":215,"mtime":1611036126693,"results":"17","hashOfConfig":"15"},{"size":946,"mtime":1611037707126,"results":"18","hashOfConfig":"15"},{"size":3210,"mtime":1611040747889,"results":"19","hashOfConfig":"15"},{"size":564,"mtime":1611038830861,"results":"20","hashOfConfig":"15"},{"size":2413,"mtime":1611093596043,"results":"21","hashOfConfig":"15"},{"size":1379,"mtime":1611034209303,"results":"22","hashOfConfig":"15"},{"size":881,"mtime":1611040807033,"results":"23","hashOfConfig":"15"},{"size":532,"mtime":1610964840003,"results":"24","hashOfConfig":"15"},{"size":2659,"mtime":1611032213214,"results":"25","hashOfConfig":"15"},{"size":982,"mtime":1611036714788,"results":"26","hashOfConfig":"15"},{"size":621,"mtime":1611035211880,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"xr5ej0",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/anx/Рабочий стол/aptrix-test-app/src/index.js",[],["58","59"],"/home/anx/Рабочий стол/aptrix-test-app/src/components/App/App.jsx",[],"/home/anx/Рабочий стол/aptrix-test-app/src/redux/rootReducer.js",[],"/home/anx/Рабочий стол/aptrix-test-app/src/redux/types.js",[],"/home/anx/Рабочий стол/aptrix-test-app/src/redux/actions.js",["60"],"import API from '../axios/API'\nimport { saveAccessToken, saveRefreshToken } from '../localStorage/localStorage'\nimport {\n  AUTH_SET_COUNTRY_KEY,\n  AUTH_SET_EMAIL,\n  AUTH_SET_INVITED_BY,\n  AUTH_SET_LOGIN_PASSWORD,\n  AUTH_SET_LOGIN_USERNAME,\n  AUTH_SET_NAME,\n  AUTH_SET_PASSWORD,\n  AUTH_SET_SURNAME,\n  AUTH_SET_ACCESS_TOKEN,\n  AUTH_CLEAR_ACCESS_TOKEN,\n  AUTH_SET_REFRESH_TOKEN,\n  AUTH_CLEAR_REFRESH_TOKEN,\n  APP_FETCH_USER_DATA,\n  APP_SET_CLIENT_ID,\n  APP_SET_USER_DATA,\n} from './types'\n\nexport function setEmail(payload) {\n  return {\n    type: AUTH_SET_EMAIL,\n    payload,\n  }\n}\n\nexport function setPassword(payload) {\n  return {\n    type: AUTH_SET_PASSWORD,\n    payload,\n  }\n}\n\nexport function setInvitedBy(payload) {\n  return {\n    type: AUTH_SET_INVITED_BY,\n    payload,\n  }\n}\n\nexport function setName(payload) {\n  return {\n    type: AUTH_SET_NAME,\n    payload,\n  }\n}\n\nexport function setSurname(payload) {\n  return {\n    type: AUTH_SET_SURNAME,\n    payload,\n  }\n}\n\nexport function setCountryKey(payload) {\n  return {\n    type: AUTH_SET_COUNTRY_KEY,\n    payload,\n  }\n}\n\nexport function registerUser(registerData) {\n  return async (dispatch) => {\n    console.log()\n    try {\n      const response = await API.post('/clients/create/', registerData)\n      if (response.status === 201) {\n        alert('Регистрация успешна')\n      }\n    } catch (e) {\n      alert('Ошибка при регистрации', e)\n    }\n  }\n}\n\nexport function setLoginUsername(payload) {\n  return {\n    type: AUTH_SET_LOGIN_USERNAME,\n    payload,\n  }\n}\n\nexport function setLoginPassword(payload) {\n  return {\n    type: AUTH_SET_LOGIN_PASSWORD,\n    payload,\n  }\n}\n\nexport function loginUser(loginData) {\n  return async (dispatch) => {\n    await API.post('/clients/token/ ', loginData)\n      .then((response) => {\n        if (response.status === 200) {\n          alert('Логин успешен ')\n          dispatch(setAccessToken(response.data.access))\n          dispatch(setRefreshToken(response.data.refresh))\n          dispatch(setClientId(response.data.client_id))\n        }\n      })\n      .catch((res) => {\n        alert('Ошибка при входе', res.status)\n      })\n  }\n}\n\nexport function setAccessToken(payload) {\n  saveAccessToken(payload)\n  return {\n    type: AUTH_SET_ACCESS_TOKEN,\n    payload,\n  }\n}\n\nexport function clearAccessToken() {\n  return {\n    type: AUTH_CLEAR_ACCESS_TOKEN,\n  }\n}\n\nexport function setRefreshToken(payload) {\n  saveRefreshToken(payload)\n  return {\n    type: AUTH_SET_REFRESH_TOKEN,\n    payload,\n  }\n}\n\nexport function clearRefreshToken() {\n  return {\n    type: AUTH_CLEAR_REFRESH_TOKEN,\n  }\n}\n\nexport function setClientId(payload) {\n  return {\n    type: APP_SET_CLIENT_ID,\n    payload,\n  }\n}\n\nexport function fetchUserData(client_id) {\n  return async (dispatch) => {\n    await API.get('/clients/' + client_id)\n      .then((response) => {\n        console.log(response.data)\n        dispatch(setUserData(response.data))\n      })\n      .catch((res) => {\n        alert('Ошибка при запросе данных пользователя', res.status)\n      })\n  }\n}\n\nexport function setUserData(payload) {\n  return {\n    type: APP_SET_USER_DATA,\n    payload,\n  }\n}\n","/home/anx/Рабочий стол/aptrix-test-app/src/redux/appReducer.js",[],"/home/anx/Рабочий стол/aptrix-test-app/src/components/RegistrationPage/RegistrationPage.jsx",[],"/home/anx/Рабочий стол/aptrix-test-app/src/components/LoginPage/LoginPage.jsx",[],"/home/anx/Рабочий стол/aptrix-test-app/src/components/MainPage/MainPage.jsx",["61"],"import React, { useEffect } from 'react'\nimport { fetchUserData } from '../../redux/actions'\nimport { useDispatch, useSelector } from 'react-redux'\n\nexport default function MainPage() {\n  const dispatch = useDispatch()\n  const user = useSelector((state) => state.app.user)\n  const client_id = useSelector((state) => state.app.client_id)\n\n  useEffect(() => {\n    console.log('Use effect')\n    dispatch(fetchUserData(client_id))\n  }, [dispatch, client_id])\n\n  if (!user) {\n    return <h1>Информация недоступна</h1>\n  }\n\n  let keys = Object.keys(user)\n\n  return (\n    <div>\n      {keys.map((item, index) => {\n        if (user[item] && typeof user[item] === 'string') {\n          return (\n            <div key={index}>\n              <span>{item}: </span>\n              <span>{user[item]}: </span>\n            </div>\n          )\n        }\n      })}\n    </div>\n  )\n}\n","/home/anx/Рабочий стол/aptrix-test-app/src/components/Header/Header.jsx",[],"/home/anx/Рабочий стол/aptrix-test-app/src/redux/authReducer.js",[],"/home/anx/Рабочий стол/aptrix-test-app/src/axios/API.js",["62"],"import axios from 'axios'\nimport { getAccessToken, getRefreshToken } from '../localStorage/localStorage'\n\nlet api = axios.create({\n  baseURL: 'http://erp.apptrix.ru/api',\n  responseType: 'json',\n})\n\n//request interceptor\napi.interceptors.request.use(\n  function (config) {\n    const token = getAccessToken()\n    if (token) {\n      config.headers['Authorization'] = 'Bearer ' + token\n    }\n\n    return config\n  },\n  function (error) {\n    console.log('Error in axios request interceptor')\n    return Promise.reject(error)\n  }\n)\n\n//response interceptor\napi.interceptors.response.use(\n  function (response) {\n    console.log('response interceptor', response.status)\n    console.log('response:', response)\n    if (response.status === 401) {\n      console.log('Try refresh token')\n      const refresh_token = getRefreshToken()\n    }\n    return response\n  },\n  function (error) {\n    console.log('Error in response interceptor')\n    return Promise.reject(error)\n  }\n)\n\nexport default api\n","/home/anx/Рабочий стол/aptrix-test-app/src/localStorage/localStorage.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":16,"column":3,"nodeType":"69","messageId":"70","endLine":16,"endColumn":22},{"ruleId":"71","severity":1,"message":"72","line":23,"column":31,"nodeType":"73","messageId":"74","endLine":23,"endColumn":33},{"ruleId":"67","severity":1,"message":"75","line":32,"column":13,"nodeType":"69","messageId":"70","endLine":32,"endColumn":26},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'APP_FETCH_USER_DATA' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'refresh_token' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]